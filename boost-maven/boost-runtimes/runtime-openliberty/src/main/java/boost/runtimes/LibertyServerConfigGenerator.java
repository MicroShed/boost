/*******************************************************************************
 * Copyright (c) 2018, 2019 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package boost.runtimes;

import static io.openliberty.boost.common.config.ConfigConstants.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import io.openliberty.boost.common.BoostLoggerI;
import io.openliberty.boost.common.boosters.*;
import io.openliberty.boost.common.config.BoostProperties;
import io.openliberty.boost.common.config.ConfigConstants;
import io.openliberty.boost.common.config.ServerConfigGenerator;
import io.openliberty.boost.common.utils.BoostUtil;

/**
 * Create a Liberty server.xml
 *
 */
public class LibertyServerConfigGenerator implements ServerConfigGenerator {

    private final String serverPath;
    private final String libertyInstallPath;

    private final BoostLoggerI logger;

    private Document serverXml;
    private Element featureManager;
    private Element serverRoot;
    private Element httpEndpoint;

    private Set<String> featuresAdded;

    private Properties bootstrapProperties;

    private final Properties boostConfigProperties;

    public LibertyServerConfigGenerator(String serverPath, BoostLoggerI logger) throws ParserConfigurationException {

        this.serverPath = serverPath;
        this.libertyInstallPath = serverPath + "/../../.."; // Three directories
                                                            // back from
                                                            // 'wlp/usr/servers/BoostServer'
        this.logger = logger;

        boostConfigProperties = BoostProperties.getConfiguredBoostProperties(logger);

        generateServerXml();

        featuresAdded = new HashSet<String>();
        bootstrapProperties = new Properties();
    }

    private void generateServerXml() throws ParserConfigurationException {
        DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();

        // Create top level server config element
        serverXml = docBuilder.newDocument();
        serverRoot = serverXml.createElement("server");
        serverRoot.setAttribute("description", "Liberty server generated by Liberty Boost");
        serverXml.appendChild(serverRoot);

        // Create featureManager config element
        featureManager = serverXml.createElement(FEATURE_MANAGER);
        serverRoot.appendChild(featureManager);

        // Create httpEndpoint config element
        httpEndpoint = serverXml.createElement(HTTP_ENDPOINT);
        httpEndpoint.setAttribute("id", DEFAULT_HTTP_ENDPOINT);
        serverRoot.appendChild(httpEndpoint);
    }

    public void addServerConfig(AbstractBoosterConfig boosterConfig) throws Exception {
        if (boosterConfig instanceof JDBCBoosterConfig) {
            addDataSource(((JDBCBoosterConfig)boosterConfig).getProductName(), ((JDBCBoosterConfig)boosterConfig).getDatasourceProperties());
        }
    }

    public void addFeature(AbstractBoosterConfig boosterConfig) {
        if (boosterConfig instanceof CDIBoosterConfig && boosterConfig.version.equals(AbstractBoosterConfig.MP_20_VERSION)) {
            addFeature(ConfigConstants.CDI_20);
        } else if (boosterConfig instanceof JAXRSBoosterConfig) {
            if (boosterConfig.version.equals(AbstractBoosterConfig.EE_7_VERSION)) {
                addFeature(ConfigConstants.JAXRS_20);
            } else if (boosterConfig.version.equals(AbstractBoosterConfig.EE_8_VERSION)) {
                addFeature(ConfigConstants.JAXRS_21);
            }
        } else if (boosterConfig instanceof JDBCBoosterConfig) {
            String compilerVersion = boostConfigProperties.getProperty(BoostProperties.INTERNAL_COMPILER_TARGET);

            if ("1.8".equals(compilerVersion) || "8".equals(compilerVersion) || "9".equals(compilerVersion)
                    || "10".equals(compilerVersion)) {
                    addFeature(ConfigConstants.JDBC_42);
            } else if ("11".equals(compilerVersion)) {
                addFeature(ConfigConstants.JDBC_43);
            } else {
                addFeature(ConfigConstants.JDBC_41); // Default to the spec for Liberty's
                                                     // minimum supported JRE (version 7
                                                     // as of 17.0.0.3)
            }
        } else if (boosterConfig instanceof JPABoosterConfig) {
            if (boosterConfig.version.equals(AbstractBoosterConfig.EE_7_VERSION)) {
                addFeature(ConfigConstants.JPA_21);
            } else if (boosterConfig.version.equals(AbstractBoosterConfig.EE_8_VERSION)) {
                addFeature(ConfigConstants.JPA_22);
            }
        } else if (boosterConfig instanceof JSONPBoosterConfig && boosterConfig.version.equals(AbstractBoosterConfig.MP_20_VERSION)) {
            addFeature(ConfigConstants.JSONP_11);
        } else if (boosterConfig instanceof MPConfigBoosterConfig && boosterConfig.version.equals(AbstractBoosterConfig.MP_20_VERSION)) {
            addFeature(ConfigConstants.MPCONFIG_13);
        } else if (boosterConfig instanceof MPHealthBoosterConfig && boosterConfig.version.equals(AbstractBoosterConfig.MP_20_VERSION)) {
            addFeature(ConfigConstants.MPHEALTH_10);
        } else if (boosterConfig instanceof MPOpenTracingBoosterConfig && boosterConfig.version.equals(AbstractBoosterConfig.MP_20_VERSION)) {
            addFeature(ConfigConstants.MPOPENTRACING_11);
        } else if (boosterConfig instanceof MPRestClientBoosterConfig && boosterConfig.version.equals(AbstractBoosterConfig.MP_20_VERSION)) {
            addFeature(ConfigConstants.MPRESTCLIENT_11);
        }
    }

    /**
     * Add a Liberty feature to the server configuration
     *
     */
    public void addFeature(String featureName) {
        if (!featuresAdded.contains(featureName)) {
            Element feature = serverXml.createElement(FEATURE);
            feature.appendChild(serverXml.createTextNode(featureName));
            featureManager.appendChild(feature);
            featuresAdded.add(featureName);
        }
    }

    /**
     * Add a list of features to the server configuration
     *
     */
    public void addFeatures(List<String> features) {

        for (String featureName : features) {
            addFeature(featureName);
        }
    }

    /**
     * Write the server.xml and bootstrap.properties to the server config
     * directory
     *
     * @throws TransformerException
     * @throws IOException
     */
    public void writeToServer() throws TransformerException, IOException {
        // Replace auto-generated server.xml
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        DOMSource source = new DOMSource(serverXml);
        StreamResult result = new StreamResult(new File(serverPath + "/server.xml"));
        transformer.transform(source, result);

        // Generate bootstrap.properties
        if (!bootstrapProperties.isEmpty()) {

            OutputStream output = null;
            try {
                output = new FileOutputStream(serverPath + "/bootstrap.properties");
                bootstrapProperties.store(output, null);
            } finally {
                if (output != null) {
                    output.close();
                }
            }
        }

        // Try setting all bootstrap properties to system properties for test
        // purposes
        for (String key : bootstrapProperties.stringPropertyNames()) {
            System.setProperty(key, bootstrapProperties.getProperty(key));
        }
    }

    public void addBootstrapProperties(Properties properties) throws IOException {

        if (properties != null) {
            for (String key : properties.stringPropertyNames()) {
                String value = properties.getProperty(key);

                addBoostrapProperty(key, value);
            }
        }
    }

    private void addBoostrapProperty(String key, String value) throws IOException {

        // Using this to hold the properties we want to encrypt and the type of
        // encryption we want to use
        Map<String, String> propertiesToEncrypt = BoostProperties.getPropertiesToEncrypt();

        if (propertiesToEncrypt.containsKey(key) && value != null && !value.equals("")) {
            // Getting properties that might not have been passed with the other
            // properties that will be written to boostrap.properties
            // Don't want to add certain properties to the boostrap properties
            // so we'll grab them here
            Properties supportedProperties = BoostProperties.getConfiguredBoostProperties(logger);
            value = BoostUtil.encrypt(libertyInstallPath, value, propertiesToEncrypt.get(key),
                    supportedProperties.getProperty(BoostProperties.AES_ENCRYPTION_KEY), logger);
        }

        bootstrapProperties.put(key, value);
    }

    @Override
    public void addKeystore(Map<String, String> keystoreProps, Map<String, String> keyProps) {
        Element keystore = serverXml.createElement(KEYSTORE);
        keystore.setAttribute("id", DEFAULT_KEYSTORE);

        for (String key : keystoreProps.keySet()) {
            keystore.setAttribute(key, keystoreProps.get(key));
        }

        if (!keyProps.isEmpty()) {
            Element keyEntry = serverXml.createElement(KEY_ENTRY);

            for (String key : keyProps.keySet()) {
                keyEntry.setAttribute(key, keyProps.get(key));
            }

            keystore.appendChild(keyEntry);
        }

        serverRoot.appendChild(keystore);
    }

    @Override
    public void addApplication(String appName) {
        Element appCfg = serverXml.createElement(APPLICATION);
        appCfg.setAttribute(CONTEXT_ROOT, "/");
        appCfg.setAttribute(LOCATION, appName + "." + WAR_PKG_TYPE);
        appCfg.setAttribute(TYPE, WAR_PKG_TYPE);
        serverRoot.appendChild(appCfg);

    }

    @Override
    public void addHostname(String hostname) throws Exception {
        httpEndpoint.setAttribute("host", BoostUtil.makeVariable(BoostProperties.ENDPOINT_HOST));

        addBoostrapProperty(BoostProperties.ENDPOINT_HOST, hostname);
    }

    @Override
    public void addHttpPort(String httpPort) throws Exception {
        httpEndpoint.setAttribute("httpPort", BoostUtil.makeVariable(BoostProperties.ENDPOINT_HTTP_PORT));

        addBoostrapProperty(BoostProperties.ENDPOINT_HTTP_PORT, httpPort);
    }

    @Override
    public void addHttpsPort(String httpsPort) throws Exception {
        httpEndpoint.setAttribute("httpsPort", BoostUtil.makeVariable(BoostProperties.ENDPOINT_HTTPS_PORT));

        addBoostrapProperty(BoostProperties.ENDPOINT_HTTPS_PORT, httpsPort);
    }

    @Override
    public void addDataSource(String productName, Properties serverProperties) throws Exception {

        String driverJar = null;
        String datasourcePropertiesElement = null;

        if (productName.equals(JDBCBoosterConfig.DERBY)) {
            driverJar = DERBY_JAR;
            datasourcePropertiesElement = PROPERTIES_DERBY_EMBEDDED;
        } else if (productName.equals(JDBCBoosterConfig.DB2)) {
            driverJar = DB2_JAR;
            datasourcePropertiesElement = PROPERTIES_DB2_JCC;
        } else if (productName.equals(JDBCBoosterConfig.MYSQL)) {
            driverJar = MYSQL_JAR;
            datasourcePropertiesElement = PROPERTIES;
        }

        Element serverRoot = serverXml.getDocumentElement();

        // Find the root server element
        NodeList list = serverXml.getChildNodes();
        for (int i = 0; i < list.getLength(); i++) {
            if (list.item(i).getNodeName().equals("server")) {
                serverRoot = (Element) list.item(i);
            }
        }

        // Add library
        Element lib = serverXml.createElement(LIBRARY);
        lib.setAttribute("id", JDBC_LIBRARY_1);
        Element fileLoc = serverXml.createElement(FILESET);
        fileLoc.setAttribute("dir", RESOURCES);
        fileLoc.setAttribute("includes", driverJar);
        lib.appendChild(fileLoc);
        serverRoot.appendChild(lib);

        // Add datasource
        Element dataSource = serverXml.createElement(DATASOURCE);
        dataSource.setAttribute("id", DEFAULT_DATASOURCE);
        dataSource.setAttribute(JDBC_DRIVER_REF, JDBC_DRIVER_1);

        // Add all configured datasource properties
        Element props = serverXml.createElement(datasourcePropertiesElement);
        addDatasourceProperties(serverProperties, props);
        dataSource.appendChild(props);

        serverRoot.appendChild(dataSource);

        // Add jdbc driver
        Element jdbcDriver = serverXml.createElement(JDBC_DRIVER);
        jdbcDriver.setAttribute("id", JDBC_DRIVER_1);
        jdbcDriver.setAttribute(LIBRARY_REF, JDBC_LIBRARY_1);
        serverRoot.appendChild(jdbcDriver);

        // Add properties to bootstrap.properties
        addBootstrapProperties(serverProperties);
    }

    private void addDatasourceProperties(Properties serverProperties, Element propertiesElement) {
        for (String property : serverProperties.stringPropertyNames()) {
            String attribute = property.replace(BoostProperties.DATASOURCE_PREFIX, "");
            propertiesElement.setAttribute(attribute, BoostUtil.makeVariable(property));
        }
    }

}
