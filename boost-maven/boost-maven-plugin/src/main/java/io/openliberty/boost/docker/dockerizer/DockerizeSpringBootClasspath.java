/*******************************************************************************
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package io.openliberty.boost.docker.dockerizer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.JarEntry;
import java.util.jar.Manifest;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.project.MavenProject;

import io.openliberty.boost.docker.Dockerizer;
import io.openliberty.boost.utils.MavenProjectUtil;
import net.wasdev.wlp.common.plugins.util.SpringBootUtil;

public class DockerizeSpringBootClasspath implements Dockerizer {

    private final MavenProject project;
    private final File projectDirectory;
    private final File outputDirectory;
    private final File appArchive;
    private final Log log;
    private final String springBootVersion;

    private static final String BOOST_GEN = "# GENERATED BY LIBERTY BOOST PLUGIN";
    private static final String LINE_SEPARATOR = System.getProperty("line.separator");

    public Map<String, String> getBuildArgs() {
        // Nothing at this time
        return new HashMap<String, String>();
    }

    public DockerizeSpringBootClasspath(MavenProject project, File appArchive, Log log) {
        this.project = project;
        this.projectDirectory = project.getBasedir();
        this.outputDirectory = new File(project.getBuild().getDirectory());
        this.appArchive = appArchive;
        this.log = log;
        this.springBootVersion = MavenProjectUtil.findSpringBootVersion(project);
    }

    /**
     * Creates a new Dockerfile in the project directory if the Dockerfile doesn't
     * exist. A warning message is displayed when the Dockerfile already exists.
     * Existing Dockerfile is not modified and will be used to build the Docker
     * image.
     *
     * @throws Exception
     */
    public void createDockerFile() throws Exception {
        if (springBootVersion != null) {
            createSpringBootDockerFile(springBootVersion);
        } else {
            throw new MojoExecutionException("Unable to create a Dockerfile because application type is not supported");
        }
    }

    /**
     * Creates a Dockerfile with appropriate LibertyBaseImage to build an efficient
     * Docker image of the Spring Boot application.
     *
     * @param springBootVersion
     * @throws MojoExecutionException
     * @throws IOException
     */
    private void createSpringBootDockerFile(String springBootVersion) throws MojoExecutionException, IOException {
        try {
            if (SpringBootUtil.isSpringBootUberJar(appArchive)) {
                // unzip spring-petclinic-2.0.0.BUILD-SNAPSHOT.jar -d dependency
                // extractAppArchive();
                extract(appArchive, projectDirectory);
                String startClass = getSpringStartClass(appArchive);
                File dockerFile = createNewDockerFile(projectDirectory);
                writeSpringBootDockerFile(dockerFile, startClass);
            } else {
                throw new MojoExecutionException(appArchive.getAbsolutePath() + " file is not an executable archive. "
                        + "The repackage goal of the spring-boot-maven-plugin must be configured to run first in order to create the required executable archive.");
            }
        } catch (FileAlreadyExistsException e1) {
            log.warn("Dockerfile already exists");
        }
    }

    // This should preferably use an existing utility method, or
    // at least be in a utility class
    private static void extract(File artifact, File projectDirectory) {
        File extractDir = new File(projectDirectory.getPath() + "/target/dependency/");
        if (!extractDir.exists())
            extractDir.mkdirs();

        try {
            byte[] buffer = new byte[1024];
            ZipInputStream zis = new ZipInputStream(new FileInputStream(artifact));
            ZipEntry ze = zis.getNextEntry();
            while (ze != null) {
                File newFile = new File(extractDir, ze.getName());
                if (ze.isDirectory()) {
                    newFile.mkdirs();
                } else {
                    new File(newFile.getParent()).mkdirs();
                    FileOutputStream fos = new FileOutputStream(newFile);
                    int len;
                    while ((len = zis.read(buffer)) > 0) {
                        fos.write(buffer, 0, len);
                    }
                    fos.close();
                }
                ze = zis.getNextEntry();
            }
            // close last ZipEntry
            zis.closeEntry();
            zis.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private String getSpringStartClass(File artifact) {
        try (JarFile jarFile = new JarFile(artifact)) {
            Manifest manifest = jarFile.getManifest();
            if (manifest != null) {
                Attributes attributes = manifest.getMainAttributes();
                return attributes.getValue("Start-Class");
            }
        } catch (IOException e) {}
        return "";
    }

    private File createNewDockerFile(File dockerfileDirectory) throws IOException {
        File dockerFile = new File(dockerfileDirectory, "Dockerfile");
        Files.createFile(dockerFile.toPath());
        log.info("Creating Dockerfile: " + dockerFile.getAbsolutePath());
        return dockerFile;
    }

    private void writeSpringBootDockerFile(File dockerFile, String startClass) throws IOException {
        ArrayList<String> lines = new ArrayList<>();
        lines.add(BOOST_GEN);
        lines.add("FROM adoptopenjdk/openjdk8-openj9");
        lines.add("VOLUME /tmp");
        lines.add("ARG DEPENDENCY=target/dependency");
        lines.add("COPY ${DEPENDENCY}/BOOT-INF/lib /app/lib");
        lines.add("COPY ${DEPENDENCY}/META-INF /app/META-INF");
        lines.add("COPY ${DEPENDENCY}/BOOT-INF/classes /app");
        lines.add("ENTRYPOINT [\"java\",\"-cp\",\"app:app/lib/*\",\"" + startClass + "\"]");
        Files.write(dockerFile.toPath(), lines, Charset.forName("UTF-8"));
    }

    /**
     * Creates a new .dockerignore file in the project directory if the
     * .dockerignore file doesn't exist. Existing .dockerignore file will be
     * appended with the lines generated by the plugin. Creating/appending of
     * .dockerignore happens only when the plugin generates Dockerfile.
     *
     * @throws Exception
     */
    public void createDockerIgnore() throws Exception {
        File dockerIgnore = new File(projectDirectory, ".dockerignore");
        boolean dockerIgnoreAlreadyExists = false;

        if (isFileGeneratedByPlugin(new File(projectDirectory, "Dockerfile"))) {
            try {
                Files.createFile(dockerIgnore.toPath());
                log.info("Creating .dockerignore: " + dockerIgnore.getAbsolutePath());
            } catch (FileAlreadyExistsException e) {
                log.warn("The .dockerignore file already exists");
                dockerIgnoreAlreadyExists = true;
            }
            writeDockerIgnore(dockerIgnore, dockerIgnoreAlreadyExists);
        }
    }

    private void writeDockerIgnore(File dockerIgnore, boolean dockerIgnoreAlreadyExists) throws IOException {
        ArrayList<String> lines = new ArrayList<>();
        if (isFileGeneratedByPlugin(dockerIgnore)) {
            return;
        }

        // Ignore all the log files in the project directory and ignore the liberty
        // runtime folder in the target directory generated by `boost:package` goal
        if (dockerIgnoreAlreadyExists) {
            log.info("Adding lines to: " + dockerIgnore.getAbsolutePath());
            if (dockerIgnore.length() > 0) {
                lines.add(LINE_SEPARATOR);
            }
        }
        lines.add(BOOST_GEN);
        lines.add("*.log");
        lines.add("target/liberty");

        Files.write(dockerIgnore.toPath(), lines, Charset.forName("UTF-8"), StandardOpenOption.APPEND);
    }

    /**
     * Checks if the file is generated by Liberty Boost plugin.
     *
     * @param file
     * @return boolean
     * @throws IOException
     */
    private boolean isFileGeneratedByPlugin(File file) throws IOException {
        try (FileReader fileReader = new FileReader(file)) {
            try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    if (BOOST_GEN.equals(line)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
