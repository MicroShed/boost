/*******************************************************************************
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package io.openliberty.boost.docker.dockerizer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.project.MavenProject;

public abstract class Dockerizer {

	// TODO: Should we add a timestamp as part of this header?
	public static final String BOOST_GEN = "# GENERATED BY LIBERTY BOOST PLUGIN";
	public static final String LINE_SEPARATOR = System.getProperty("line.separator");

	protected final MavenProject project;
	protected final File projectDirectory;
	protected final File outputDirectory;
	protected final File appArchive;
	protected final Log log;

	public Dockerizer(MavenProject project, File appArchive, Log log) {
		this.project = project;
		this.projectDirectory = project.getBasedir();
		this.outputDirectory = new File(project.getBuild().getDirectory());
		this.appArchive = appArchive;
		this.log = log;
	}

	/**
	 * Construct the build arguments needed by the Dockerfile
	 *
	 * @throws Exception
	 */
	public abstract Map<String, String> getBuildArgs();

	/**
	 * Creates a new Dockerfile in the project directory if the Dockerfile doesn't
	 * exist. A warning message is displayed when the Dockerfile already exists.
	 * Existing Dockerfile is not modified and will be used to build the Docker
	 * image.
	 *
	 * @throws Exception
	 */
	public abstract List<String> getDockerfileLines() throws MojoExecutionException;

	/**
	 * Creates a new .dockerignore file in the project directory if the
	 * .dockerignore file doesn't exist. Existing .dockerignore file will be
	 * appended with the lines generated by the plugin. Creating/appending of
	 * .dockerignore happens only when the plugin generates Dockerfile.
	 *
	 */
	public abstract List<String> getDockerIgnoreList();

	/**
	 * Creates a new Dockerfile in the project directory if the Dockerfile doesn't
	 * exist. A warning message is displayed when the Dockerfile already exists.
	 * Existing Dockerfile is not modified and will be used to build the Docker
	 * image.
	 *
	 * @throws Exception
	 */
	public abstract void createDockerFile() throws MojoExecutionException;

	// Dockerignore methods

	/**
	 * Creates a new .dockerignore file in the project directory if the
	 * .dockerignore file doesn't exist. Existing .dockerignore file will be
	 * appended with the lines generated by the plugin. Creating/appending of
	 * .dockerignore happens only when the plugin generates Dockerfile.
	 *
	 * @throws Exception
	 */
	public void createDockerIgnore() throws IOException {
		File dockerIgnore = new File(projectDirectory, ".dockerignore");
		boolean dockerIgnoreAlreadyExists = false;

		if (isFileGeneratedByPlugin(new File(projectDirectory, "Dockerfile"))) {
			try {
				Files.createFile(dockerIgnore.toPath());
				log.info("Creating .dockerignore: " + dockerIgnore.getAbsolutePath());
			} catch (FileAlreadyExistsException e) {
				log.warn("The .dockerignore file already exists");
				dockerIgnoreAlreadyExists = true;
			}
			writeDockerIgnore(dockerIgnore, dockerIgnoreAlreadyExists);
		}
	}

	private void writeDockerIgnore(File dockerIgnore, boolean dockerIgnoreAlreadyExists) throws IOException {
		ArrayList<String> lines = new ArrayList<>();
		if (isFileGeneratedByPlugin(dockerIgnore)) {
			return;
		}

		// Ignore all the log files in the project directory and ignore the liberty
		// runtime folder in the target directory generated by `boost:package` goal
		if (dockerIgnoreAlreadyExists) {
			log.info("Adding lines to: " + dockerIgnore.getAbsolutePath());
			if (dockerIgnore.length() > 0) {
				lines.add(LINE_SEPARATOR);
			}
		}
		lines.add(BOOST_GEN);
		lines.addAll(getDockerIgnoreList());

		Files.write(dockerIgnore.toPath(), lines, Charset.forName("UTF-8"), StandardOpenOption.APPEND);
	}

	/**
	 * Checks if the file is generated by Liberty Boost plugin.
	 *
	 * @param file
	 * @return boolean
	 * @throws IOException
	 */
	private boolean isFileGeneratedByPlugin(File file) throws IOException {
		try (FileReader fileReader = new FileReader(file)) {
			try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
				String line;
				while ((line = bufferedReader.readLine()) != null) {
					if (line.startsWith(BOOST_GEN)) {
						return true;
					}
				}
			}
		}
		return false;
	}

}
