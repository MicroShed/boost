/*******************************************************************************
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package io.openliberty.boost.utils;

import static io.openliberty.boost.utils.ConfigConstants.*;

import java.io.File;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import io.openliberty.boost.BoosterPackConfigurator;

/**
 * Create a Liberty server.xml
 *
 */
public class LibertyServerConfigGenerator {

    Document doc;
    Element featureManager;
    Element serverRoot;

    Set<String> featuresAdded;

    public LibertyServerConfigGenerator() throws ParserConfigurationException {
        generateDocument();
    }

    private void generateDocument() throws ParserConfigurationException {
        DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();

        // Create top level server config element
        doc = docBuilder.newDocument();
        serverRoot = doc.createElement("server");
        serverRoot.setAttribute("description", "Liberty server generated by Liberty Boost");
        doc.appendChild(serverRoot);

        // Create featureManager config element
        featureManager = doc.createElement(FEATURE_MANAGER);
        serverRoot.appendChild(featureManager);

        featuresAdded = new HashSet<String>();
    }

    /**
     * Add an HTTP endpoint configuration for this server config instance.
     *
     * @param host
     *            The host to use for this server.
     * @param httpPort
     *            The HTTP port to use for this server.
     * @param httpsPort
     *            The HTTPS port to use for this server.
     */
    public void addHttpEndpoint(String host, String httpPort, String httpsPort) {

        Element httpEndpoint = doc.createElement(HTTP_ENDPOINT);
        httpEndpoint.setAttribute("id", DEFAULT_HTTP_ENDPOINT);

        if (host != null) {
            httpEndpoint.setAttribute("host", host);
        }
        if (httpPort != null) {
            httpEndpoint.setAttribute("httpPort", httpPort);
        }
        if (httpsPort != null) {
            httpEndpoint.setAttribute("httpsPort", httpsPort);
        }

        serverRoot.appendChild(httpEndpoint);
    }

    /**
     * Add a Liberty feature to the server configuration
     *
     * @param featureName
     *            The full name of the Liberty feature to add.
     */
    public void addFeature(String featureName) {

        if (!featuresAdded.contains(featureName)) {
            Element feature = doc.createElement(FEATURE);
            feature.appendChild(doc.createTextNode(featureName));
            featureManager.appendChild(feature);
            featuresAdded.add(featureName);
        }

    }

    /**
     * Add a feature to the feature config
     *
     * @param features
     *            A list of features to add.
     */
    public void addFeatures(List<String> features) {

        for (String featureName : features) {
            addFeature(featureName);
        }
    }

    /**
     * Write the server.xml to the server config directory
     *
     * @param serverPath
     *            The full path to the server config directory.
     * @throws TransformerException
     */
    public void writeToServer(String serverPath) throws TransformerException {

        // Replace auto-generated server.xml
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(new File(serverPath + "/server.xml"));
        transformer.transform(source, result);

    }

    public void addConfigForFeatures(List<BoosterPackConfigurator> boosterConfigurators) {
        for (BoosterPackConfigurator booster : boosterConfigurators) {
            booster.writeConfigToServerXML(doc);
        }

    }
    
    public void addConfigForApp(String artifactId, String version){
    	Element appCfg = doc.createElement(APPLICATION);
    	appCfg.setAttribute("context-root", "/");
    	appCfg.setAttribute("location", artifactId+"-"+version+".war");
    	appCfg.setAttribute("type", "war");
    	serverRoot.appendChild(appCfg);

    }
}